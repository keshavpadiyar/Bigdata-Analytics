{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from pyspark import SparkContext\n",
    "import pyspark.sql.functions as F"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "spark = SparkContext(\"local\", \"Lab2\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Assignment 1: What are the lowest and highest temperatures measured each year for the period 1950-2014.\n",
    "# Using Dataframes\n",
    "df_tempReadings = spark.read.csv(\"file:///home/x_kesma/Lab1/input_data/temperature-readings.csv\", header = False, sep = ';' )\n",
    "df_tempReadings = df_tempReadings.withColumnRenamed(\"_c0\", \"stationNumber\")\\\n",
    "                                 .withColumnRenamed(\"_c1\", \"date\")\\\n",
    "                                 .withColumnRenamed(\"_c2\", \"time\")\\\n",
    "                                 .withColumnRenamed(\"_c3\", \"airTemperature\")\\\n",
    "                                 .withColumnRenamed(\"_c4\", \"quality\")\n",
    "\n",
    "df_filtered = df_tempReadings.filter((F.year(F.col('date'))>=1950) & (F.year(F.col('date'))<=2014))\n",
    "\n",
    "df_filtered.groupBy(F.year('date'))\\\n",
    "            .agg(F.min('airTemperature').alias('MinTemp'),F.max('airTemperature').alias('MaxTemp'))\\\n",
    "            .orderBy(F.year('date'))\\\n",
    "            .show(100)\n",
    "\n",
    "                                "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#using RDD\n",
    "rdd_tempReadings = sc.textFile(\"file:///home/x_kesma/Lab1/input_data/temperature-readings.csv\") \\\n",
    "                            .map(lambda line: line.split(\";\"))\n",
    "\n",
    "rdd_filtered_1 = rdd_tempReadings.filter(lambda line: (int(line[1][0:4]))>=1950 and int(line[1][0:4])<=2014) \\\n",
    "                            .map(lambda line: (line[1][0:4],(line[0],float(line[3]))))\n",
    "\n",
    "print(rdd_filtered_1.reduceByKey(max)\\\n",
    "            .sortBy(keyfunc=lambda k: k[0],ascending = False).collect())\n",
    "\n",
    "print(rdd_filtered_1.reduceByKey(min)\\\n",
    "            .sortBy(keyfunc=lambda k: k[0],ascending = False).collect())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 2_1 Count the number of readings for each month in the period of 1950-2014 which are higher than 10 degrees \n",
    "\n",
    "rdd_filtered_2_1 = rdd_tempReadings.filter(lambda line: ((int(line[1][0:4]))>=1950\\\n",
    "                                                       and int(line[1][0:4])<=2014)\\\n",
    "                                                       and float(line[3]) >10 )\\\n",
    "                                .map(lambda line: ((line[1][0:4], line[1][5:7]),(line[0],float(line[3]))))\\\n",
    "                                .countByKey()\n",
    "print(sorted(rdd_filtered_2_1.items(), key = lambda v:v[1], reverse = True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 2_2 Repeat the exercise,this time taking only distinct readings from each station.\n",
    "# That is, if a station reported a reading above 10 degrees in some month, then itappears only\n",
    "# once in the count for that month\n",
    "\n",
    "rdd_filtered_2_2 = rdd_tempReadings.filter(lambda line: ((int(line[1][0:4]))>=1950\\\n",
    "                                                       and int(line[1][0:4])<=2014)\\\n",
    "                                                       and float(line[3]) >10 )\\\n",
    "                                .map(lambda line: (line[1][0:4], line[1][5:7],line[0]))\\\n",
    "                                .distinct()\\\n",
    "                                .map(lambda line: ((line[0],line[1]),(line[2])))\\\n",
    "                                .countByKey()\n",
    "print(sorted(rdd_filtered_2_2.items(), key = lambda v:v[1], reverse = True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 3 Find the average monthly temperature for each available station in Sweden. Your result\n",
    "#should include average temperature for each station for each month in the period of 1960-\n",
    "#2014. Bear in mind that not every station has the readings for each month in this timeframe.\n",
    "\n",
    "rdd_filtered_3 = rdd_tempReadings.filter(lambda line: (int(line[1][0:4]))>=1950 and int(line[1][0:4])<=2014) \\\n",
    "                            .map(lambda line: ((line[1][0:4], line[1][5:7], line[0]),(float(line[3]))))\\\n",
    "                            .groupByKey()\\\n",
    "                            .mapValues(lambda val: sum(val)/len(val))\n",
    "print(rdd_filtered_3\\\n",
    "            .sortBy(keyfunc=lambda k: (k[0][2],k[0][0],k[0][1]),ascending = False).collect())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 4 Provide a list of stations with their associated maximum measured temperatures and\n",
    "# maximum measured daily precipitation. Show only those stations where the maximum\n",
    "# temperature is between 25 and 30 degrees and maximum daily precipitation is between 100mm and 200mm.\n",
    "\n",
    "rdd_precReadings = sc.textFile(\"file:///home/x_kesma/Lab1/input_data/precipitation-readings.csv\") \\\n",
    "                            .map(lambda line: line.split(\";\"))\n",
    "\n",
    "rdd_tempReadings_4_1 = rdd_tempReadings.filter(lambda line: ((int(line[1][0:4])>=1950 and int(line[1][0:4])<=2014))\\\n",
    "                                                       and (float(line[3]) >= 10 and float(line[3]) >= 20))\\\n",
    "                                .map(lambda line: ((line[1],line[0]),(float(line[3]))))\\\n",
    "                                .reduceByKey(max)\n",
    "\n",
    "rdd_precReadings_4_2 = rdd_precReadings.filter(lambda line: float(line[3])>=10.0 and float(line[3])<=20.0)\\\n",
    "                                 .map(lambda line:((line[1],line[0]),(float(line[3]))))\\\n",
    "                                 .reduceByKey(max)\n",
    "\n",
    "\n",
    "rdd_joins = rdd_tempReadings_4_1.join(rdd_precReadings_4_2)\\\n",
    "                                .map(lambda line:(int(line[0][1]),(line[1][0], line[1][1])))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 5 Calculate the average monthly precipitation for the Ã–stergotland region (list of stations is\n",
    "# provided in the separate file) for the period 1993-2016. In orderto dothis, you willfirstneed to\n",
    "# calculate the total monthly precipitation for each station before calculating the monthly\n",
    "# average (by averaging over stations).\n",
    "\n",
    "rdd_ostStations = sc.textFile(\"file:///home/x_kesma/Lab1/input_data/precipitation-readings.csv\") \\\n",
    "                            .map(lambda line: line.split(\";\"))\n",
    "\n",
    "rdd_ostStations_5_1 = rdd_ostStations.map(lambda line: int (line[0])).distinct().collect()\n",
    "\n",
    "rdd_precReadings_5_2 = rdd_precReadings.filter(lambda line: ((int(line[1][0:4])>=1993 and int(line[1][0:4])<=2016))\\\n",
    "                                               and int(line[0]) in rdd_ostStations_5_1)\\\n",
    "                                       .map(lambda line: ((line[1][0:4],line[1][5:7]),(float(line[3]))))\\\n",
    "                                       .groupByKey()\\\n",
    "                                       .mapValues(lambda val: sum(val)/len(val))\\\n",
    "                                       .sortBy(keyfunc=lambda k: (k[0][0],k[0][1]),ascending = False)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
